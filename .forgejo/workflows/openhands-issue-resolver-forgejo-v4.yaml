name: OpenHands Issue Resolver (forgejo)

on:
  issues:
    types: [opened, labeled, assigned]
  pull_request:
    types: [labeled]
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  pull_request_review:
    types: [submitted]

jobs:
  openhands-resolver:
    if: |
      github.event.label.name == 'fix-me' ||
      github.event.label.name == 'fix-me-experimental' ||
      (
        ((github.event_name == 'issue_comment' || github.event_name == 'pull_request_review_comment') &&
        contains(github.event.comment.body, vars.OPENHANDS_MACRO || '@openhands-agent')
        ) ||
        (github.event_name == 'pull_request_review' &&
        contains(github.event.review.body, vars.OPENHANDS_MACRO || '@openhands-agent')
        )
      ) ||
      (
        github.event_name == 'issues' &&
        github.event.action == 'opened' &&
        contains(github.event.issue.body, vars.OPENHANDS_MACRO || '@openhands-agent')
      ) ||
      (
        github.event_name == 'issues' &&
        github.event.action == 'assigned' &&
        github.event.assignee.login == 'openhands-agent'
      )
    runs-on: docker
    container:
      image: ghcr.io/sunwood-ai-labs/openhands-cli-action-forgejo/cli-action:20250706-082033

    permissions:
      contents: write
      pull-requests: write
      issues: write
    
    steps:
      - name: Verify environment
        shell: bash
        run: |
          echo "üîß Verifying pre-installed environment..."
          echo "==========================================="
          echo "üêç Python version: $(python --version)"
          echo "üì¶ Node.js version: $(node --version)"
          echo "üìã NPM version: $(npm --version)"
          echo "‚ö° UV version: $(uv --version)"
          echo "üåç PATH: $PATH"
          echo "üë§ Git user: $(git config --global user.name)"
          echo "üìß Git email: $(git config --global user.email)"
          echo "üìÅ Current directory: $(pwd)"
          echo "üë• Current user: $(whoami)"
          echo "üóÇÔ∏è  Root config directory:"
          ls -la /root/.config/openhands/ || echo "Config directory not found"
          echo "==========================================="
          echo "‚úÖ Environment verification complete"

      - name: Add eyes reaction
        shell: bash
        run: |
          echo "üëÄ Adding eyes reaction..."
          
          case "${{ github.event_name }}" in
            "issue_comment")
              REACTION_URL="${{ github.api_url }}/repos/${{ github.repository }}/issues/comments/${{ github.event.comment.id }}/reactions"
              ;;
            "issues")
              REACTION_URL="${{ github.api_url }}/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/reactions"
              ;;
            "pull_request"|"pull_request_review"|"pull_request_review_comment")
              REACTION_URL="${{ github.api_url }}/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/reactions"
              ;;
          esac
          
          if [ -n "$REACTION_URL" ]; then
            curl -s -f -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d '{"content":"eyes"}' \
              "$REACTION_URL" || echo "‚ö†Ô∏è Failed to add reaction"
          fi

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create work branch and prepare environment
        id: prepare
        shell: bash
        run: |
          if [ -n "${{ github.event.pull_request.number }}" ]; then
            ISSUE_NUMBER="${{ github.event.pull_request.number }}"
            TASK_CONTENT="${{ github.event.pull_request.body }}"
          elif [ -n "${{ github.event.issue.number }}" ]; then
            ISSUE_NUMBER="${{ github.event.issue.number }}"
            if [ "${{ github.event_name }}" = "issue_comment" ]; then
              TASK_CONTENT="${{ github.event.comment.body }}"
            else
              TASK_CONTENT="${{ github.event.issue.body }}"
            fi
          fi
          
          TIMESTAMP=$(date -u +"%Y%m%d-%H%M%S")
          BRANCH_NAME="openhands/fix-issue-${ISSUE_NUMBER}-${TIMESTAMP}"
          
          echo "üåø Creating work branch: $BRANCH_NAME"
          git checkout -b "$BRANCH_NAME"
          
          CLEAN_TASK=$(echo "$TASK_CONTENT" | sed 's/@openhands-agent[^[:space:]]*//' | sed 's/^[[:space:]]*//' | sed 's/[[:space:]]*$//')
          
          if [ -z "$CLEAN_TASK" ]; then
            CLEAN_TASK="Issue #${ISSUE_NUMBER}„ÇíËß£Ê±∫„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"
          fi
          
          CURRENT_DIR=$(pwd)
          ENHANCED_TASK="„Ç∑„É≥„Éó„É´„Å™HTML„ÅÆ„Åä„Åø„Åè„Åò„Ç¢„Éó„É™„Çí‰ΩúÊàê„Åó„Å¶

          Ê≥®ÊÑèÔºöÁ∑®ÈõÜ‰ΩúÊ•≠„ÅØ Current directory: ${CURRENT_DIR} „ÅßË°å„Å£„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ„Åì„ÅÆÂ†¥ÊâÄ„Åß„Éï„Ç°„Ç§„É´„Çí‰ΩúÊàê„ÉªÁ∑®ÈõÜ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"
          
          echo "üìù Enhanced task: $ENHANCED_TASK"
          
          echo "ISSUE_NUMBER=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "ENHANCED_TASK<<EOF" >> $GITHUB_OUTPUT
          echo "$ENHANCED_TASK" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Run OpenHands
        id: openhands
        shell: bash
        run: |
          echo "üöÄ Running OpenHands..."
          CURRENT_DIR=$(pwd)
          ENHANCED_TASK="${{ steps.prepare.outputs.ENHANCED_TASK }}"
          
          mkdir -p /root/.openhands
          cat > /root/.openhands/config.toml << EOF
          [core]
          runtime = "cli"
          workspace_base = "${CURRENT_DIR}"
          save_trajectory_path = "/root/.openhands/trajectories.json"
          
          [llm]
          model = "${LLM_MODEL}"
          api_key = "${LITELLM_API_KEY}"
          base_url = "${LLM_BASE_URL}"
          custom_llm_provider = "${LLM_PROVIDER}"
          EOF
          
          echo "‚úÖ Created config.toml:"
          cat /root/.openhands/config.toml
          
          python -m openhands.core.main -t "$ENHANCED_TASK" --config-file /root/.openhands/config.toml
          
          if [ -n "$(git status --porcelain)" ]; then
            echo "HAS_CHANGES=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Changes detected."
          else
            echo "HAS_CHANGES=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è No changes detected."
          fi
        env:
          LITELLM_API_KEY: ${{ secrets.LITELLM_API_KEY }}
          LLM_MODEL: ${{ vars.LLM_MODEL || 'openai/claude-sonnet-4-20250514' }}
          LLM_BASE_URL: ${{ vars.LLM_BASE_URL || 'http://192.168.0.121:4001' }}
          LLM_PROVIDER: ${{ vars.LLM_PROVIDER || 'openai' }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MAX_ITERATIONS: ${{ vars.MAX_ITERATIONS || '30' }}

      - name: Extract OpenHands Results
        id: extract_results
        if: always()
        shell: bash
        run: |
          TRAJECTORY_FILE="/root/.openhands/trajectories.json"
          RESULTS_FILE="/tmp/openhands_results.json"
          echo "RESULTS_FILE=${RESULTS_FILE}" >> $GITHUB_OUTPUT

          if [ -f "$TRAJECTORY_FILE" ]; then
            echo "üîç Extracting results from $TRAJECTORY_FILE"
            jq 'map(select(.action == "finish")) | .[-1] | {final_thought: .args.final_thought, llm_metrics: .llm_metrics}' "$TRAJECTORY_FILE" > "${RESULTS_FILE}"
            echo "‚úÖ Results saved to ${RESULTS_FILE}."
          else
            echo "‚ö†Ô∏è Trajectory file not found at $TRAJECTORY_FILE"
            echo '{}' > "${RESULTS_FILE}"
          fi

      - name: Commit changes and create Pull Request
        if: steps.openhands.outputs.HAS_CHANGES == 'true'
        id: create_pr
        shell: bash
        run: |
          echo "üîß Committing changes and creating Pull Request..."
          ISSUE_NUMBER="${{ steps.prepare.outputs.ISSUE_NUMBER }}"
          BRANCH_NAME="${{ steps.prepare.outputs.BRANCH_NAME }}"
          
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          git add .
          git commit -m "ü§ñ OpenHands: Fix for issue #${ISSUE_NUMBER}"
          git push origin "$BRANCH_NAME"
          
          # Ë§áÊï∞Ë°å„ÅÆPRÊú¨Êñá„ÇíÂÆöÁæ©
          PR_BODY="ü§ñ OpenHands „Å´„Çà„ÇãËá™Âãï‰øÆÊ≠£

          ÂØæË±°Issue: #${ISSUE_NUMBER}
          ‰ΩúÊ•≠„Éñ„É©„É≥„ÉÅ: ${BRANCH_NAME}"
          
          # jq„Çí‰Ωø„Å£„Å¶ÂÆâÂÖ®„Å´JSON„Éö„Ç§„É≠„Éº„Éâ„ÇíÁîüÊàê
          PR_PAYLOAD=$(jq -n \
            --arg title "ü§ñ OpenHands: Fix for issue #${ISSUE_NUMBER}" \
            --arg head "$BRANCH_NAME" \
            --arg base "main" \
            --arg body "$PR_BODY" \
            '{title: $title, head: $head, base: $base, body: $body, draft: true}')

          PR_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "$PR_PAYLOAD" \
            "${{ github.api_url }}/repos/${{ github.repository }}/pulls")
          
          RESPONSE_BODY=$(echo "$PR_RESPONSE" | sed '$d')
          HTTP_CODE=$(echo "$PR_RESPONSE" | tail -n1)

          if [ "$HTTP_CODE" -ge 200 ] && [ "$HTTP_CODE" -lt 300 ]; then
            PR_NUMBER=$(echo "$RESPONSE_BODY" | jq -r '.number')
            echo "PR_NUMBER=${PR_NUMBER}" >> $GITHUB_OUTPUT
            echo "‚úÖ PR created: #${PR_NUMBER}"
          else
            echo "‚ùå Failed to create PR. HTTP Status: $HTTP_CODE"
            echo "Response: $RESPONSE_BODY"
          fi

      - name: Post results
        if: always()
        shell: bash
        run: |
          echo "üìù Posting results..."
          
          ISSUE_NUMBER="${{ steps.prepare.outputs.ISSUE_NUMBER }}"
          HAS_CHANGES="${{ steps.openhands.outputs.HAS_CHANGES }}"
          PR_NUMBER="${{ steps.create_pr.outputs.PR_NUMBER }}"
          BRANCH_NAME="${{ steps.prepare.outputs.BRANCH_NAME }}"
          RESULTS_FILE="${{ steps.extract_results.outputs.RESULTS_FILE }}"
          
          # Ë§áÊï∞Ë°å„ÅÆÊñáÂ≠óÂàó„ÇíÂ§âÊï∞„Å´Ê†ºÁ¥ç
          if [ "$HAS_CHANGES" = "true" ] && [ -n "$PR_NUMBER" ]; then
            COMMENT_HEADER="üéâ **OpenHandsÂÆå‰∫Ü**

          „Éâ„É©„Éï„ÉàPR **#${PR_NUMBER}** „Çí‰ΩúÊàê„Åó„Åæ„Åó„Åü„ÄÇ
          ‰ΩúÊ•≠„Éñ„É©„É≥„ÉÅ: \`${BRANCH_NAME}\`"
          elif [ "$HAS_CHANGES" = "true" ]; then
            COMMENT_HEADER="‚ö†Ô∏è **OpenHands„ÅåÂ§âÊõ¥„Çí‰ΩúÊàê„Åó„Åæ„Åó„Åü„Åå„ÄÅPR‰ΩúÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ**

          ‰ΩúÊ•≠„Éñ„É©„É≥„ÉÅ: \`${BRANCH_NAME}\`"
          else
            COMMENT_HEADER="‚ÑπÔ∏è **OpenHands„ÇíÂÆüË°å„Åó„Åæ„Åó„Åü„Åå„ÄÅÂ§âÊõ¥„ÅØÊ§úÂá∫„Åï„Çå„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ**

          ‰ΩúÊ•≠„Éñ„É©„É≥„ÉÅ: \`${BRANCH_NAME}\`"
          fi
          
          RESULTS_BODY=""
          if [ -f "$RESULTS_FILE" ] && [ "$(jq 'length' "$RESULTS_FILE")" -gt 0 ]; then
              FINAL_THOUGHT=$(jq -r '.final_thought' "$RESULTS_FILE")
              LLM_METRICS_JSON=$(jq '.llm_metrics' "$RESULTS_FILE")
              # Ë§áÊï∞Ë°å„ÅÆÊñáÂ≠óÂàó„ÇíÂ§âÊï∞„Å´Ê†ºÁ¥ç
              RESULTS_BODY="

          ---

          ### ÊúÄÁµÇÁöÑ„Å™ÊÄùËÄÉ (final_thought)
          \`\`\`text
          $FINAL_THOUGHT
          \`\`\`

          ### LLM„É°„Éà„É™„ÇØ„Çπ (llm_metrics)
          \`\`\`json
          $LLM_METRICS_JSON
          \`\`\`"
          fi
          
          # jq„Çí‰Ωø„Å£„Å¶ÊúÄÁµÇÁöÑ„Å™JSON„Éö„Ç§„É≠„Éº„Éâ„ÇíÂÆâÂÖ®„Å´ÁîüÊàê
          JSON_PAYLOAD=$(jq -n \
            --arg header "$COMMENT_HEADER" \
            --arg results "$RESULTS_BODY" \
            '{body: ($header + $results)}')
          
          echo "üí¨ Comment to post:"
          echo "$JSON_PAYLOAD"
          
          curl -s -f -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD" \
            "${{ github.api_url }}/repos/${{ github.repository }}/issues/${ISSUE_NUMBER}/comments" || echo "‚ö†Ô∏è Failed to post comment."

      - name: Add completion reaction
        if: always()
        shell: bash
        run: |
          echo "üéØ Adding completion reaction..."
          
          HAS_CHANGES="${{ steps.openhands.outputs.HAS_CHANGES }}"
          PR_NUMBER="${{ steps.create_pr.outputs.PR_NUMBER }}"
          
          if [ "$HAS_CHANGES" = "true" ] && [ -n "$PR_NUMBER" ]; then
            REACTION_CONTENT="+1"
          elif [ "$HAS_CHANGES" = "true" ]; then
            REACTION_CONTENT="confused"
          else
            REACTION_CONTENT="-1"
          fi
          
          case "${{ github.event_name }}" in
            "issue_comment")
              REACTION_URL="${{ github.api_url }}/repos/${{ github.repository }}/issues/comments/${{ github.event.comment.id }}/reactions"
              ;;
            "issues")
              REACTION_URL="${{ github.api_url }}/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/reactions"
              ;;
            "pull_request"|"pull_request_review"|"pull_request_review_comment")
              REACTION_URL="${{ github.api_url }}/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/reactions"
              ;;
          esac
          
          if [ -n "$REACTION_URL" ]; then
            curl -s -f -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d "{\"content\":\"${REACTION_CONTENT}\"}" \
              "$REACTION_URL" || echo "‚ö†Ô∏è Failed to add reaction"
            echo "‚úÖ Added ${REACTION_CONTENT} reaction"
          fi
