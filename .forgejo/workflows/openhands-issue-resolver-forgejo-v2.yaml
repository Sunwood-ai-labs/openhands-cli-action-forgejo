name: OpenHands Issue Resolver (forgejo)

on:
  issues:
    types: [opened, labeled, assigned]
  pull_request:
    types: [labeled]
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  pull_request_review:
    types: [submitted]

jobs:
  openhands-resolver:
    if: |
      github.event.label.name == 'fix-me' ||
      github.event.label.name == 'fix-me-experimental' ||
      (
        ((github.event_name == 'issue_comment' || github.event_name == 'pull_request_review_comment') &&
        contains(github.event.comment.body, vars.OPENHANDS_MACRO || '@openhands-agent')
        ) ||
        (github.event_name == 'pull_request_review' &&
        contains(github.event.review.body, vars.OPENHANDS_MACRO || '@openhands-agent')
        )
      ) ||
      (
        github.event_name == 'issues' &&
        github.event.action == 'opened' &&
        contains(github.event.issue.body, vars.OPENHANDS_MACRO || '@openhands-agent')
      ) ||
      (
        github.event_name == 'issues' &&
        github.event.action == 'assigned' &&
        github.event.assignee.login == 'openhands-agent'
      )
    runs-on: docker
    container:
      image: ghcr.io/sunwood-ai-labs/openhands-cli-action-forgejo/cli-action:20250706-082033

    permissions:
      contents: write
      pull-requests: write
      issues: write
    
    steps:
      - name: Verify environment
        shell: bash
        run: |
          echo "üîß Verifying pre-installed environment..."
          echo "==========================================="
          echo "üêç Python version: $(python --version)"
          echo "üì¶ Node.js version: $(node --version)"
          echo "üìã NPM version: $(npm --version)"
          echo "‚ö° UV version: $(uv --version)"
          echo "üåç PATH: $PATH"
          echo "üë§ Git user: $(git config --global user.name)"
          echo "üìß Git email: $(git config --global user.email)"
          echo "üìÅ Current directory: $(pwd)"
          echo "üë• Current user: $(whoami)"
          echo "üóÇÔ∏è  Root config directory:"
          ls -la /root/.config/openhands/ || echo "Config directory not found"
          echo "==========================================="
          echo "‚úÖ Environment verification complete"

      - name: Add eyes reaction
        shell: bash
        run: |
          echo "üëÄ Adding eyes reaction..."
          
          case "${{ github.event_name }}" in
            "issue_comment")
              REACTION_URL="${{ github.api_url }}/repos/${{ github.repository }}/issues/comments/${{ github.event.comment.id }}/reactions"
              ;;
            "issues")
              REACTION_URL="${{ github.api_url }}/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/reactions"
              ;;
            "pull_request"|"pull_request_review"|"pull_request_review_comment")
              REACTION_URL="${{ github.api_url }}/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/reactions"
              ;;
          esac
          
          if [ -n "$REACTION_URL" ]; then
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d '{"content":"eyes"}' \
              "$REACTION_URL" || echo "‚ö†Ô∏è Failed to add reaction"
          fi

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create work branch and prepare environment
        id: prepare
        shell: bash
        run: |
          # Extract issue number and task content
          if [ -n "${{ github.event.pull_request.number }}" ]; then
            ISSUE_NUMBER="${{ github.event.pull_request.number }}"
            TASK_CONTENT="${{ github.event.pull_request.body }}"
          elif [ -n "${{ github.event.issue.number }}" ]; then
            ISSUE_NUMBER="${{ github.event.issue.number }}"
            if [ "${{ github.event_name }}" = "issue_comment" ]; then
              TASK_CONTENT="${{ github.event.comment.body }}"
            else
              TASK_CONTENT="${{ github.event.issue.body }}"
            fi
          fi
          
          # Create work branch
          TIMESTAMP=$(date -u +"%Y%m%d-%H%M%S")
          BRANCH_NAME="openhands/fix-issue-${ISSUE_NUMBER}-${TIMESTAMP}"
          
          echo "üåø Creating work branch: $BRANCH_NAME"
          git checkout -b "$BRANCH_NAME"
          
          # Debug: Current status
          echo "üîç DEBUG: Initial state after branch creation"
          echo "==========================================="
          echo "üî¢ Issue number: $ISSUE_NUMBER"
          echo "üåø Branch name: $BRANCH_NAME"
          echo "‚è∞ Timestamp: $TIMESTAMP"
          echo "üìÅ Current directory: $(pwd)"
          echo "üìä Git status:"
          git status
          echo "üìã Directory listing:"
          ls -la
          echo "üåø Current branch: $(git branch --show-current)"
          echo "==========================================="
          
          # Clean task content and add directory instruction
          CLEAN_TASK=$(echo "$TASK_CONTENT" | sed 's/@openhands-agent[^[:space:]]*//' | sed 's/^[[:space:]]*//' | sed 's/[[:space:]]*$//')
          
          if [ -z "$CLEAN_TASK" ]; then
            CLEAN_TASK="Issue #${ISSUE_NUMBER}„ÇíËß£Ê±∫„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"
          fi
          
          # Add directory instruction to task
          CURRENT_DIR=$(pwd)
          ENHANCED_TASK="${CLEAN_TASK}

          Ê≥®ÊÑèÔºöÁ∑®ÈõÜ‰ΩúÊ•≠„ÅØ Current directory: ${CURRENT_DIR} „ÅßË°å„Å£„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ„Åì„ÅÆÂ†¥ÊâÄ„Åß„Éï„Ç°„Ç§„É´„Çí‰ΩúÊàê„ÉªÁ∑®ÈõÜ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"
          
          echo "üìù Enhanced task: $ENHANCED_TASK"
          
          # Save variables for next step
          echo "ISSUE_NUMBER=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "ENHANCED_TASK<<EOF" >> $GITHUB_OUTPUT
          echo "$ENHANCED_TASK" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Run OpenHands
        id: openhands
        shell: bash
        run: |
          echo "üöÄ Running OpenHands..."
          
          # Get current directory and task from previous step
          CURRENT_DIR=$(pwd)
          ENHANCED_TASK="${{ steps.prepare.outputs.ENHANCED_TASK }}"
          
          echo "üîç DEBUG: Before OpenHands execution"
          echo "==========================================="
          echo "üìÅ Current directory: $CURRENT_DIR"
          echo "üìã Directory listing:"
          ls -la
          echo "üìä Git status:"
          git status
          echo "üåø Current branch: $(git branch --show-current)"
          echo "üìù Task to execute: $ENHANCED_TASK"
          echo "==========================================="
          
          # Create unified config.toml in current directory
          cat > /root/.openhands/config.toml << EOF
          [core]
          # Docker„Çí‰Ωø„Çè„Åö„Å´„É≠„Éº„Ç´„É´„ÅÆ„Ç≥„Éû„É≥„Éâ„É©„Ç§„É≥„ÅßÂÆüË°å„Åô„ÇãË®≠ÂÆö
          runtime = "cli"
          workspace_base = "${CURRENT_DIR}"
          save_trajectory_path = "/root/.openhands/trajectories.json"
          
          [llm]
          # „É¢„Éá„É´Âêç„ÇíÊåáÂÆö„Åó„Åæ„Åô„ÄÇ„Éó„É≠„Éê„Ç§„ÉÄ„ÉºÂêçÔºàanthropic/Ôºâ„ÇíÂê´„ÇÅ„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
          model = "${LLM_MODEL}"
          
          # API„Ç≠„Éº„ÇíË®≠ÂÆö„Åó„Åæ„Åô„ÄÇ
          api_key = "${LITELLM_API_KEY}"
          
          # API„É™„ÇØ„Ç®„Çπ„Éà„ÇíÈÄÅ‰ø°„Åô„Çã„Éô„Éº„ÇπURL„ÇíÊåáÂÆö„Åó„Åæ„Åô„ÄÇ
          base_url = "${LLM_BASE_URL}"
          
          # litellm„Åå„Åì„ÅÆ„Éô„Éº„ÇπURL„ÇíOpenAI‰∫íÊèõ„Å®„Åó„Å¶Êâ±„ÅÜ„Åü„ÇÅ„ÅÆË®≠ÂÆö
          custom_llm_provider = "${LLM_PROVIDER}"
    
          EOF
          
          echo "‚úÖ Created unified config.toml:"
          cat /root/.openhands/config.toml
          
          # Run OpenHands with Python module syntax
          echo "üèÉ Executing OpenHands with enhanced task..."
          python -m openhands.core.main -t "$ENHANCED_TASK" --config-file /root/.openhands/config.toml
          
          echo "üîç DEBUG: After OpenHands execution"
          echo "==========================================="
          echo "üìÅ Current directory: $(pwd)"
          echo "üìã Directory listing:"
          ls -la
          echo "üìä Git status:"
          git status
          echo "üåø Current branch: $(git branch --show-current)"
          echo "==========================================="
          
          # Check for changes
          if [ -n "$(git status --porcelain)" ]; then
            echo "HAS_CHANGES=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Changes detected:"
            git status --porcelain
          else
            echo "HAS_CHANGES=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è No changes detected"
          fi
        env:
          LITELLM_API_KEY: ${{ secrets.LITELLM_API_KEY }}
          LLM_MODEL: ${{ vars.LLM_MODEL || 'openai/claude-sonnet-4-20250514' }}
          LLM_BASE_URL: ${{ vars.LLM_BASE_URL || 'http://192.168.0.121:4001' }}
          LLM_PROVIDER: ${{ vars.LLM_PROVIDER || 'openai' }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MAX_ITERATIONS: ${{ vars.MAX_ITERATIONS || '30' }}

      - name: Commit changes and create Pull Request
        if: steps.openhands.outputs.HAS_CHANGES == 'true'
        id: create_pr
        shell: bash
        run: |
          echo "üîß Committing changes and creating Pull Request..."
          
          ISSUE_NUMBER="${{ steps.prepare.outputs.ISSUE_NUMBER }}"
          BRANCH_NAME="${{ steps.prepare.outputs.BRANCH_NAME }}"
          
          echo "üîç DEBUG: PR creation details"
          echo "==========================================="
          echo "üî¢ Issue number: $ISSUE_NUMBER"
          echo "üåø Branch name: $BRANCH_NAME"
          echo "üìÅ Current directory: $(pwd)"
          echo "üìä Git status before commit:"
          git status
          echo "üîç Changed files:"
          git diff --name-only
          echo "üåø Current branch: $(git branch --show-current)"
          echo "==========================================="
          
          # Commit changes
          git add .
          git commit -m "ü§ñ OpenHands: Fix for issue #${ISSUE_NUMBER}"
          
          echo "üîç DEBUG: After commit"
          echo "==========================================="
          echo "üìä Git status after commit:"
          git status
          echo "üìã Git log (last 2 commits):"
          git log --oneline -2
          echo "==========================================="
          
          # Push branch
          git push origin "$BRANCH_NAME"
          
          echo "üîç DEBUG: PR API call"
          echo "==========================================="
          PR_PAYLOAD="{\"title\":\"ü§ñ OpenHands: Fix for issue #${ISSUE_NUMBER}\",\"head\":\"${BRANCH_NAME}\",\"base\":\"main\",\"body\":\"ü§ñ OpenHands „Å´„Çà„ÇãËá™Âãï‰øÆÊ≠£\\n\\nÂØæË±°Issue: #${ISSUE_NUMBER}\\n‰ΩúÊ•≠„Éñ„É©„É≥„ÉÅ: ${BRANCH_NAME}\",\"draft\":true}"
          echo "üìã PR payload: $PR_PAYLOAD"
          echo "üîó API URL: ${{ github.api_url }}/repos/${{ github.repository }}/pulls"
          echo "==========================================="
          
          # Create PR
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "$PR_PAYLOAD" \
            "${{ github.api_url }}/repos/${{ github.repository }}/pulls" > pr_response.json
          
          echo "üîç DEBUG: PR response"
          echo "==========================================="
          cat pr_response.json
          echo "==========================================="
          
          PR_NUMBER=$(grep -o '"number":[0-9]*' pr_response.json | cut -d':' -f2 | head -1)
          echo "PR_NUMBER=${PR_NUMBER}" >> $GITHUB_OUTPUT
          echo "‚úÖ PR created: #${PR_NUMBER}"

      - name: Post results
        if: always()
        shell: bash
        run: |
          echo "üìù Posting results..."
          
          ISSUE_NUMBER="${{ steps.prepare.outputs.ISSUE_NUMBER }}"
          HAS_CHANGES="${{ steps.openhands.outputs.HAS_CHANGES }}"
          PR_NUMBER="${{ steps.create_pr.outputs.PR_NUMBER }}"
          BRANCH_NAME="${{ steps.prepare.outputs.BRANCH_NAME }}"
          
          echo "üîç DEBUG: Final results"
          echo "==========================================="
          echo "üî¢ Issue number: $ISSUE_NUMBER"
          echo "üîÑ Has changes: $HAS_CHANGES"
          echo "üîó PR number: $PR_NUMBER"
          echo "üåø Branch name: $BRANCH_NAME"
          echo "==========================================="
          
          if [ "$HAS_CHANGES" = "true" ] && [ -n "$PR_NUMBER" ]; then
            COMMENT_BODY="üéâ OpenHandsÂÆå‰∫ÜÔºÅ„Éâ„É©„Éï„ÉàPR #${PR_NUMBER} „Çí‰ΩúÊàê„Åó„Åæ„Åó„Åü„ÄÇ\\n\\n‰ΩúÊ•≠„Éñ„É©„É≥„ÉÅ: \`${BRANCH_NAME}\`"
          elif [ "$HAS_CHANGES" = "true" ]; then
            COMMENT_BODY="üéâ OpenHands„ÅåÂ§âÊõ¥„Çí‰ΩúÊàê„Åó„Åæ„Åó„Åü„Åå„ÄÅPR‰ΩúÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ\\n\\n‰ΩúÊ•≠„Éñ„É©„É≥„ÉÅ: \`${BRANCH_NAME}\`"
          else
            COMMENT_BODY="‚ö†Ô∏è OpenHands„ÇíÂÆüË°å„Åó„Åæ„Åó„Åü„Åå„ÄÅÂ§âÊõ¥„ÅØÊ§úÂá∫„Åï„Çå„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ\\n\\n‰ΩúÊ•≠„Éñ„É©„É≥„ÉÅ: \`${BRANCH_NAME}\`"
          fi
          
          echo "üí¨ Comment to post: $COMMENT_BODY"
          
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"body\":\"${COMMENT_BODY}\"}" \
            "${{ github.api_url }}/repos/${{ github.repository }}/issues/${ISSUE_NUMBER}/comments"

      - name: Add completion reaction
        if: always()
        shell: bash
        run: |
          echo "üéØ Adding completion reaction..."
          
          HAS_CHANGES="${{ steps.openhands.outputs.HAS_CHANGES }}"
          PR_NUMBER="${{ steps.create_pr.outputs.PR_NUMBER }}"
          
          if [ "$HAS_CHANGES" = "true" ] && [ -n "$PR_NUMBER" ]; then
            REACTION_CONTENT="+1"
          elif [ "$HAS_CHANGES" = "true" ]; then
            REACTION_CONTENT="confused"
          else
            REACTION_CONTENT="-1"
          fi
          
          case "${{ github.event_name }}" in
            "issue_comment")
              REACTION_URL="${{ github.api_url }}/repos/${{ github.repository }}/issues/comments/${{ github.event.comment.id }}/reactions"
              ;;
            "issues")
              REACTION_URL="${{ github.api_url }}/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/reactions"
              ;;
            "pull_request"|"pull_request_review"|"pull_request_review_comment")
              REACTION_URL="${{ github.api_url }}/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/reactions"
              ;;
          esac
          
          if [ -n "$REACTION_URL" ]; then
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d "{\"content\":\"${REACTION_CONTENT}\"}" \
              "$REACTION_URL" || echo "‚ö†Ô∏è Failed to add reaction"
            echo "‚úÖ Added ${REACTION_CONTENT} reaction"
          fi
