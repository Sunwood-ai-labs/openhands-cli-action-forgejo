name: OpenHands Issue Resolver (forgejo)

on:
  issues:
    types: [opened, labeled, assigned]
  pull_request:
    types: [labeled]
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  pull_request_review:
    types: [submitted]

jobs:
  openhands-resolver:
    if: |
      github.event.label.name == 'fix-me' ||
      github.event.label.name == 'fix-me-experimental' ||
      (
        ((github.event_name == 'issue_comment' || github.event_name == 'pull_request_review_comment') &&
        contains(github.event.comment.body, vars.OPENHANDS_MACRO || '@openhands-agent')
        ) ||
        (github.event_name == 'pull_request_review' &&
        contains(github.event.review.body, vars.OPENHANDS_MACRO || '@openhands-agent')
        )
      ) ||
      (
        github.event_name == 'issues' &&
        github.event.action == 'opened' &&
        contains(github.event.issue.body, vars.OPENHANDS_MACRO || '@openhands-agent')
      ) ||
      (
        github.event_name == 'issues' &&
        github.event.action == 'assigned' &&
        github.event.assignee.login == 'openhands-agent'
      )
      
    runs-on: docker
    container:
      image: ghcr.io/sunwood-ai-labs/openhands-cli-action-forgejo/cli-action:20250706-082033

    permissions:
      contents: write
      pull-requests: write
      issues: write
    
    steps:
      - name: Verify environment
        shell: bash
        run: |
          echo "🔧 Verifying environment..."
          echo "==========================================="
          echo "📁 Current directory: $(pwd)"
          echo "🐍 Python version: $(python --version)"
          echo "📦 Node.js version: $(node --version)"
          echo "📋 NPM version: $(npm --version)"
          echo "🌍 PATH: $PATH"
          echo "👤 Git user: $(git config --global user.name)"
          echo "📧 Git email: $(git config --global user.email)"
          echo "👥 Current user: $(whoami)"
          echo "🗂️ Working directory contents:"
          ls -la
          echo "==========================================="
          echo "✅ Environment verification complete"

      - name: Add eyes reaction
        shell: bash
        run: |
          echo "👀 Adding eyes reaction..."
          echo "📁 Current directory: $(pwd)"
          
          case "${{ github.event_name }}" in
            "issue_comment")
              REACTION_URL="${{ github.api_url }}/repos/${{ github.repository }}/issues/comments/${{ github.event.comment.id }}/reactions"
              ;;
            "issues")
              REACTION_URL="${{ github.api_url }}/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/reactions"
              ;;
            "pull_request"|"pull_request_review"|"pull_request_review_comment")
              REACTION_URL="${{ github.api_url }}/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/reactions"
              ;;
          esac
          
          if [ -n "$REACTION_URL" ]; then
            curl -s -f -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d '{"content":"eyes"}' \
              "$REACTION_URL" || echo "⚠️ Failed to add reaction"
          fi

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Debug after checkout
        shell: bash
        run: |
          echo "🔍 Debug after checkout"
          echo "📁 Current directory: $(pwd)"
          echo "🗂️ Repository contents:"
          ls -la
          echo "🌿 Git status:"
          git status
          echo "🔗 Git remotes:"
          git remote -v

      - name: Create work branch and prepare environment
        id: prepare
        env:
          ISSUE_BODY_JSON: ${{ toJson(github.event.issue.body || '') }}
          COMMENT_BODY_JSON: ${{ toJson(github.event.comment.body || '') }}
          PR_BODY_JSON: ${{ toJson(github.event.pull_request.body || '') }}
          EVENT_NAME: ${{ github.event_name }}
          ISSUE_NUMBER_RAW: ${{ github.event.issue.number || github.event.pull_request.number }}
        shell: bash
        run: |
          set -e

          echo "🔍 Debug at start of prepare step"
          echo "📁 Current directory: $(pwd)"
          
          ISSUE_NUMBER="$ISSUE_NUMBER_RAW"

          # ───── 本文をイベント種別ごとに取得 ─────
          case "$EVENT_NAME" in
            issue_comment) BODY_JSON="$COMMENT_BODY_JSON" ;;
            pull_request|pull_request_review|pull_request_review_comment) BODY_JSON="$PR_BODY_JSON" ;;
            *) BODY_JSON="$ISSUE_BODY_JSON" ;;
          esac

          # JSON → 生文字列に戻し、CRLF を除去
          TASK_CONTENT=$(printf '%s\n' "$BODY_JSON" | jq -r . | tr -d '\r')

          # macro を除去して整形
          CLEAN_TASK=$(printf '%s' "$TASK_CONTENT" \
            | sed 's/@openhands-agent[^[:space:]]*//' \
            | sed 's/^[[:space:]]*//' \
            | sed 's/[[:space:]]*$//')

          [ -z "$CLEAN_TASK" ] && CLEAN_TASK="Issue #${ISSUE_NUMBER}を解決してください。"

          TIMESTAMP=$(date -u +"%Y%m%d-%H%M%S")
          BRANCH_NAME="openhands/fix-issue-${ISSUE_NUMBER}-${TIMESTAMP}"

          echo "🌿 Creating work branch: $BRANCH_NAME"
          git checkout -b "$BRANCH_NAME"
          
          echo "🔍 Debug after branch creation"
          echo "📁 Current directory: $(pwd)"
          echo "🌿 Current branch: $(git branch --show-current)"

          # OpenHands用のプロンプトを作成
          ENHANCED_TASK="Issue #${ISSUE_NUMBER}を解決してください。

          重要：必ず Current directory: $(pwd) で作業してください。ファイルの作成・編集は全てこのディレクトリで行ってください。他のディレクトリに移動しないでください。

          Original task: ${CLEAN_TASK}"

          echo "📝 Enhanced task: $ENHANCED_TASK"

          echo "ISSUE_NUMBER=$ISSUE_NUMBER" >> "$GITHUB_OUTPUT"
          echo "BRANCH_NAME=$BRANCH_NAME" >> "$GITHUB_OUTPUT"
          {
            echo "ENHANCED_TASK<<EOF"
            echo "$ENHANCED_TASK"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Post processing status comment
        id: post_processing_comment
        shell: bash
        run: |
          echo "⏳ Posting processing status comment..."
          echo "📁 Current directory: $(pwd)"
          
          ISSUE_NUMBER="${{ steps.prepare.outputs.ISSUE_NUMBER }}"
          
          PROCESSING_COMMENT="## 🚧 OpenHands Processing...⏳✨

          **処理中です。** しばらくお待ちください ☕️

          ![](https://raw.githubusercontent.com/n3r4zzurr0/svg-spinners/refs/heads/main/svg-smil/blocks-shuffle-3.svg)"

          # jqを使って安全にJSONペイロードを生成
          JSON_PAYLOAD=$(jq -n \
            --arg body "$PROCESSING_COMMENT" \
            '{body: $body}')
          
          COMMENT_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD" \
            "${{ github.api_url }}/repos/${{ github.repository }}/issues/${ISSUE_NUMBER}/comments")
          
          RESPONSE_BODY=$(echo "$COMMENT_RESPONSE" | sed '$d')
          HTTP_CODE=$(echo "$COMMENT_RESPONSE" | tail -n1)
          
          if [ "$HTTP_CODE" -ge 200 ] && [ "$HTTP_CODE" -lt 300 ]; then
            COMMENT_ID=$(echo "$RESPONSE_BODY" | jq -r '.id')
            echo "COMMENT_ID=${COMMENT_ID}" >> $GITHUB_OUTPUT
            echo "✅ Processing comment posted with ID: ${COMMENT_ID}"
          else
            echo "⚠️ Failed to post processing comment. HTTP Status: $HTTP_CODE"
            echo "COMMENT_ID=" >> $GITHUB_OUTPUT
          fi

      - name: Run OpenHands
        id: openhands
        env:
          LITELLM_API_KEY: ${{ secrets.LITELLM_API_KEY }}
          LLM_MODEL: ${{ vars.LLM_MODEL || 'openai/claude-sonnet-4-20250514' }}
          LLM_BASE_URL: ${{ vars.LLM_BASE_URL || 'http://192.168.0.121:4001' }}
          LLM_PROVIDER: ${{ vars.LLM_PROVIDER || 'openai' }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MAX_ITERATIONS: ${{ vars.MAX_ITERATIONS || '30' }}
          ENHANCED_TASK_JSON: ${{ toJson(steps.prepare.outputs.ENHANCED_TASK) }}
          ISSUE_NUMBER: ${{ steps.prepare.outputs.ISSUE_NUMBER }}
          BRANCH_NAME: ${{ steps.prepare.outputs.BRANCH_NAME }}
        shell: bash
        run: |
          set -e

          echo "🚀 Running OpenHands..."
          echo "📁 Current directory: $(pwd)"
          echo "🌿 Current branch: $(git branch --show-current)"

          CURRENT_DIR=$(pwd)
          
          # 確実にリポジトリのルートディレクトリにいることを確認
          cd "$CURRENT_DIR"
          echo "📁 Ensured working in: $(pwd)"
          
          # JSON → 生文字列へ戻し、CRLF を除去
          ENHANCED_TASK=$(printf '%s\n' "$ENHANCED_TASK_JSON" | jq -r . | tr -d '\r')
          ISSUE_NUMBER="$ISSUE_NUMBER"
          BRANCH_NAME="$BRANCH_NAME"

          # Git設定を確認
          git config --global user.name "openhands[bot]"
          git config --global user.email "openhands[bot]@users.noreply.github.com"

          # OpenHands設定ディレクトリとファイルを作成
          mkdir -p /root/.openhands
          cat > /root/.openhands/config.toml << EOF
          [core]
          runtime = "cli"
          workspace_base = "${CURRENT_DIR}"
          save_trajectory_path = "/root/.openhands/trajectories.json"
          max_iterations = ${MAX_ITERATIONS}
          
          [llm]
          model = "${LLM_MODEL}"
          api_key = "${LITELLM_API_KEY}"
          base_url = "${LLM_BASE_URL}"
          custom_llm_provider = "${LLM_PROVIDER}"
          EOF
          
          echo "✅ Created OpenHands config.toml:"
          cat /root/.openhands/config.toml
          
          echo ""
          echo "⏱️  Starting OpenHands processing..."
          echo "📋 Task: $ENHANCED_TASK"
          echo "📁 Working directory before execution: $(pwd)"
          echo ""

          # 実行前に再度ディレクトリを確認・移動
          cd "$CURRENT_DIR"
          echo "📁 Confirmed working directory: $(pwd)"

          # OpenHandsを実行
          python -m openhands.core.main -t "$ENHANCED_TASK" --config-file /root/.openhands/config.toml
          
          echo ""
          echo "✅ OpenHands processing completed!"
          echo "📁 Working directory after execution: $(pwd)"
          echo ""

          # 変更があるかチェック
          if [ -n "$(git status --porcelain)" ]; then
            echo "HAS_CHANGES=true" >> $GITHUB_OUTPUT
            echo "✅ Changes detected."
            echo "🔍 Changed files:"
            git status --porcelain
          else
            echo "HAS_CHANGES=false" >> $GITHUB_OUTPUT
            echo "⚠️ No changes detected."
          fi

          echo "🔍 Final git status:"
          git status
          echo "📊 Commit history:"
          git log --oneline -5

      - name: Extract OpenHands Results
        id: extract_results
        if: always()
        shell: bash
        run: |
          echo "🔍 Extracting OpenHands results..."
          echo "📁 Current directory: $(pwd)"
          
          TRAJECTORY_FILE="/root/.openhands/trajectories.json"
          RESULTS_FILE="/tmp/openhands_results.json"
          echo "RESULTS_FILE=${RESULTS_FILE}" >> $GITHUB_OUTPUT

          if [ -f "$TRAJECTORY_FILE" ]; then
            echo "🔍 Extracting results from $TRAJECTORY_FILE"
            # trajectories.jsonから最後のfinishアクションを抽出
            jq 'map(select(.action == "finish")) | .[-1] | {final_thought: .args.final_thought, llm_metrics: .llm_metrics}' "$TRAJECTORY_FILE" > "${RESULTS_FILE}"
            echo "✅ Results saved to ${RESULTS_FILE}."
            echo "📄 Extracted results:"
            cat "${RESULTS_FILE}"
          else
            echo "⚠️ Trajectory file not found at $TRAJECTORY_FILE"
            echo '{}' > "${RESULTS_FILE}"
          fi

      - name: Create Pull Request
        id: create_pr
        shell: bash
        run: |
          echo "🔧 Creating Pull Request..."
          echo "📁 Current directory: $(pwd)"
          echo "🌿 Current branch: $(git branch --show-current)"
          
          ISSUE_NUMBER="${{ steps.prepare.outputs.ISSUE_NUMBER }}"
          BRANCH_NAME="${{ steps.prepare.outputs.BRANCH_NAME }}"
          RESULTS_FILE="${{ steps.extract_results.outputs.RESULTS_FILE }}"
          
          echo "🚀 Pushing branch to remote..."
          git push origin "$BRANCH_NAME"
          
          # 結果ファイルから最終的な思考を取得
          FINAL_THOUGHT=""
          if [ -f "$RESULTS_FILE" ] && [ "$(jq 'length' "$RESULTS_FILE")" -gt 0 ]; then
            FINAL_THOUGHT=$(jq -r '.final_thought' "$RESULTS_FILE")
          fi
          
          # PR本文を作成
          if [ -n "$FINAL_THOUGHT" ] && [ "$FINAL_THOUGHT" != "null" ]; then
            PR_BODY="## 🤖 OpenHands による自動修正

          $FINAL_THOUGHT

          ## 📋 実装内容

          このPRは Issue #${ISSUE_NUMBER} の解決を目的として、OpenHandsによって自動生成されました。

          ---

          **詳細情報**
          - 対象Issue: #${ISSUE_NUMBER}
          - 作業ブランチ: ${BRANCH_NAME}
          - 処理方式: OpenHands CLI
          - 自動生成日時: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          **確認事項**: 変更内容を十分に確認してからマージしてください。"
          else
            PR_BODY="## 🤖 OpenHands による自動修正

          Issue #${ISSUE_NUMBER} の修正を自動実行しました。

          ## 📋 実装内容

          OpenHandsによって問題の分析と解決が行われました。変更内容を確認の上、必要に応じて追加の修正を行ってください。

          ---

          **詳細情報**
          - 対象Issue: #${ISSUE_NUMBER}
          - 作業ブランチ: ${BRANCH_NAME}
          - 処理方式: OpenHands CLI
          - 自動生成日時: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          **確認事項**: 変更内容を十分に確認してからマージしてください。"
          fi
          
          # jqを使って安全にJSONペイロードを生成
          PR_PAYLOAD=$(jq -n \
            --arg title "🤖 OpenHands: Fix for issue #${ISSUE_NUMBER}" \
            --arg head "$BRANCH_NAME" \
            --arg base "main" \
            --arg body "$PR_BODY" \
            '{title: $title, head: $head, base: $base, body: $body, draft: true}')

          PR_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "$PR_PAYLOAD" \
            "${{ github.api_url }}/repos/${{ github.repository }}/pulls")
          
          RESPONSE_BODY=$(echo "$PR_RESPONSE" | sed '$d')
          HTTP_CODE=$(echo "$PR_RESPONSE" | tail -n1)

          if [ "$HTTP_CODE" -ge 200 ] && [ "$HTTP_CODE" -lt 300 ]; then
            PR_NUMBER=$(echo "$RESPONSE_BODY" | jq -r '.number')
            echo "PR_NUMBER=${PR_NUMBER}" >> $GITHUB_OUTPUT
            echo "✅ PR created successfully: #${PR_NUMBER}"
          else
            echo "❌ Failed to create PR. HTTP Status: $HTTP_CODE"
            echo "Response: $RESPONSE_BODY"
            echo "PR_NUMBER=" >> $GITHUB_OUTPUT
          fi

      - name: Update status comment with completion
        if: always()
        shell: bash
        run: |
          echo "📝 Updating status comment with completion..."
          echo "📁 Current directory: $(pwd)"
          
          ISSUE_NUMBER="${{ steps.prepare.outputs.ISSUE_NUMBER }}"
          PR_NUMBER="${{ steps.create_pr.outputs.PR_NUMBER }}"
          BRANCH_NAME="${{ steps.prepare.outputs.BRANCH_NAME }}"
          COMMENT_ID="${{ steps.post_processing_comment.outputs.COMMENT_ID }}"
          
          # ステータスコメントを作成
          if [ -n "$PR_NUMBER" ] && [ "$PR_NUMBER" != "" ]; then
            COMMENT_HEADER="🎉 **OpenHands処理完了**

          ドラフトPR **#${PR_NUMBER}** を作成しました。
          作業ブランチ: \`${BRANCH_NAME}\`
          
          **確認事項**: 変更内容を十分に確認してからマージしてください。"
          else
            COMMENT_HEADER="⚠️ **OpenHandsが処理を完了しましたが、PR作成に失敗しました。**

          作業ブランチ: \`${BRANCH_NAME}\`
          
          手動でPRを作成してください。"
          fi
          
          # jqを使って安全にJSONペイロードを生成
          JSON_PAYLOAD=$(jq -n \
            --arg body "$COMMENT_HEADER" \
            '{body: $body}')
          
          # 処理中コメントを更新するか、新規作成するかを判定
          if [ -n "$COMMENT_ID" ] && [ "$COMMENT_ID" != "" ]; then
            echo "🔄 Updating existing comment ID: $COMMENT_ID"
            curl -s -f -X PATCH \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d "$JSON_PAYLOAD" \
              "${{ github.api_url }}/repos/${{ github.repository }}/issues/comments/${COMMENT_ID}" || echo "⚠️ Failed to update status comment."
          else
            echo "📝 Creating new status comment..."
            curl -s -f -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d "$JSON_PAYLOAD" \
              "${{ github.api_url }}/repos/${{ github.repository }}/issues/${ISSUE_NUMBER}/comments" || echo "⚠️ Failed to post status comment."
          fi

      - name: Post final thought comment
        if: always()
        shell: bash
        run: |
          echo "💭 Posting final thought comment..."
          echo "📁 Current directory: $(pwd)"
          
          ISSUE_NUMBER="${{ steps.prepare.outputs.ISSUE_NUMBER }}"
          RESULTS_FILE="${{ steps.extract_results.outputs.RESULTS_FILE }}"
          
          # 結果ファイルから最終的な思考を取得
          if [ -f "$RESULTS_FILE" ] && [ "$(jq 'length' "$RESULTS_FILE")" -gt 0 ]; then
            FINAL_THOUGHT=$(jq -r '.final_thought' "$RESULTS_FILE")
            
            if [ -n "$FINAL_THOUGHT" ] && [ "$FINAL_THOUGHT" != "null" ]; then
              COMMENT_BODY="# 🧠 最終的な思考

          $FINAL_THOUGHT"
                            
              # jqを使って安全にJSONペイロードを生成
              JSON_PAYLOAD=$(jq -n \
                --arg body "$COMMENT_BODY" \
                '{body: $body}')
              
              curl -s -f -X POST \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Content-Type: application/json" \
                -d "$JSON_PAYLOAD" \
                "${{ github.api_url }}/repos/${{ github.repository }}/issues/${ISSUE_NUMBER}/comments" || echo "⚠️ Failed to post final thought comment."
            else
              echo "⚠️ Final thought is empty or null, skipping comment."
            fi
          else
            echo "⚠️ Results file not found or empty, skipping final thought comment."
          fi

      - name: Post cost metrics comment
        if: always()
        shell: bash
        run: |
          echo "💰 Posting cost metrics comment..."
          echo "📁 Current directory: $(pwd)"
          
          ISSUE_NUMBER="${{ steps.prepare.outputs.ISSUE_NUMBER }}"
          RESULTS_FILE="${{ steps.extract_results.outputs.RESULTS_FILE }}"
          
          # 結果ファイルからメトリクスを取得
          if [ -f "$RESULTS_FILE" ] && [ "$(jq 'length' "$RESULTS_FILE")" -gt 0 ]; then
            LLM_METRICS_JSON=$(jq '.llm_metrics' "$RESULTS_FILE")
            
            # メトリクスが存在するかチェック
            if [ -n "$LLM_METRICS_JSON" ] && [ "$LLM_METRICS_JSON" != "null" ]; then
              COST=$(echo "$LLM_METRICS_JSON" | jq -r '.accumulated_cost // "N/A"')
              TOKEN_USAGE=$(echo "$LLM_METRICS_JSON" | jq -c '.accumulated_token_usage // {}')
              
              COMMENT_BODY="## 💰 実行コスト情報

          **総コスト**: \$${COST}

          **トークン使用量**:
          \`\`\`json
          $TOKEN_USAGE
          \`\`\`

          **詳細メトリクス**:
          \`\`\`json
          $LLM_METRICS_JSON
          \`\`\`"
              
              # jqを使って安全にJSONペイロードを生成
              JSON_PAYLOAD=$(jq -n \
                --arg body "$COMMENT_BODY" \
                '{body: $body}')
              
              curl -s -f -X POST \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Content-Type: application/json" \
                -d "$JSON_PAYLOAD" \
                "${{ github.api_url }}/repos/${{ github.repository }}/issues/${ISSUE_NUMBER}/comments" || echo "⚠️ Failed to post cost metrics comment."
            else
              echo "⚠️ LLM metrics not found or empty, skipping cost comment."
            fi
          else
            echo "⚠️ Results file not found or empty, skipping cost comment."
          fi

      - name: Add completion reaction
        if: always()
        shell: bash
        run: |
          echo "🎯 Adding completion reaction..."
          echo "📁 Current directory: $(pwd)"
          
          PR_NUMBER="${{ steps.create_pr.outputs.PR_NUMBER }}"
          
          if [ -n "$PR_NUMBER" ] && [ "$PR_NUMBER" != "" ]; then
            REACTION_CONTENT="+1"
          else
            REACTION_CONTENT="confused"
          fi
          
          case "${{ github.event_name }}" in
            "issue_comment")
              REACTION_URL="${{ github.api_url }}/repos/${{ github.repository }}/issues/comments/${{ github.event.comment.id }}/reactions"
              ;;
            "issues")
              REACTION_URL="${{ github.api_url }}/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/reactions"
              ;;
            "pull_request"|"pull_request_review"|"pull_request_review_comment")
              REACTION_URL="${{ github.api_url }}/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/reactions"
              ;;
          esac
          
          if [ -n "$REACTION_URL" ]; then
            curl -s -f -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d "{\"content\":\"${REACTION_CONTENT}\"}" \
              "$REACTION_URL" || echo "⚠️ Failed to add reaction"
            echo "✅ Added ${REACTION_CONTENT} reaction"
          fi